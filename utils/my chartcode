// import { useEffect, useRef, useState } from "react";
// import { HistoryCallback, LibrarySymbolInfo, PeriodParams, ErrorCallback } from "@/public/static/charting_library/charting_library";
// import {
//   ChartingLibraryWidgetOptions,
//   LanguageCode,
//   ResolutionString,
//   widget,
// } from "@/public/static/charting_library";
// import { ChartInformation, OCLHV } from "@/utils/types";

// interface TVChartContainerProps extends Partial<ChartingLibraryWidgetOptions> {
//   chartData: ChartInformation;
// }

// export const TVChartContainer = (props: TVChartContainerProps) => {
//   const chartContainerRef = useRef<HTMLDivElement>() as React.MutableRefObject<HTMLInputElement>;
//   useEffect(() => {
//     if (!chartContainerRef.current) {
//       console.error("Chart container is not initialized!");
//       return;
//     }
//     console.log("Chart container initialized:", chartContainerRef.current);
//   }, [chartContainerRef]);
  
//   useEffect(() => {
//     const widgetOptions: ChartingLibraryWidgetOptions = {
//       symbol: props.symbol,
//       datafeed: {
//         onReady: (callback: any) => {
//           setTimeout(() => callback({ supports_search: true, supports_group_request: false }), 0);
//         },
//         resolveSymbol: (symbolName: string, onSymbolResolvedCallback: any, onResolveErrorCallback: any) => {
//           setTimeout(() => {
//             onSymbolResolvedCallback({
//               ticker: symbolName,
//               name: symbolName,
//               description: symbolName,
//               type: "stock",
//               session: "0900-1630",
//               timezone: "Etc/UTC",
//               has_intraday: true,
//               supported_resolutions: ["1D", "1W", "1M"],
//               pricescale: 100,
//             });
//           }, 0);
//         },
//         getBars: (
//           symbolInfo: LibrarySymbolInfo,
//           resolution: ResolutionString,
//           periodParams: PeriodParams,
//           onHistoryCallback: HistoryCallback,
//           onErrorCallback: ErrorCallback
//         ) => {

//           // Log the data to verify it
//           console.log("props.chartData:", props.chartData);

        
//           const bars = props.chartData?.oclhv?.map((data: OCLHV) => ({
//             time: data?.time * (data?.time < 10000000000 ? 1000 : 1), // Convert seconds to milliseconds
//             open: data?.open,
//             close: data?.close,
//             high: data?.high,
//             low: data?.low,
//             volume: data?.volume,
//           })).filter(bar => bar.time && bar.open && bar.close); // Filter invalid bars
          
//           if (!bars.length) {
//             console.warn("No bar data available!");
//             onHistoryCallback([], { noData: true });
//             return;
//           }
//           onHistoryCallback(bars, { noData: false });
          
          
//           if (!chartContainerRef.current) {
//             console.error("Chart container not initialized");
//             return;
//           }
          
//           onHistoryCallback(bars, { noData: false });
        
//           console.log("Processed bars:", bars);

//           console.log(chartContainerRef.current);
         

         

//           setTimeout(() => {
//             onHistoryCallback(bars, { noData: false });
//           }, 0);
//         },
        
        
//         subscribeBars: (
//           symbolInfo: LibrarySymbolInfo,
//           resolution: ResolutionString,
//           onRealtimeCallback: any,
//           subscriberUID: string,
//           onResetCacheNeededCallback: any
//         ) => {},
//         unsubscribeBars: (subscriberUID: string) => {},

//         searchSymbols: (userInput: string, exchange: string, symbolType: string, onResult: any) => {
//           setTimeout(() => {
//             onResult([
//               {
//                 symbol: userInput,
//                 full_name: userInput,
//                 description: `${userInput} description`,
//                 exchange,
//                 ticker: userInput,
//                 type: symbolType,
//               },
//             ]);
//           }, 0);
//         },
//       },
//       interval: props.interval as ResolutionString,
//       container: chartContainerRef.current,
//       library_path: props.library_path,
//       locale: props.locale as LanguageCode,
//       disabled_features: ["use_localstorage_for_settings"],
//       enabled_features: ["study_templates"],
//       charts_storage_url: props.charts_storage_url,
//       charts_storage_api_version: props.charts_storage_api_version,
//       client_id: props.client_id,
//       user_id: props.user_id,
//       fullscreen: props.fullscreen,
//       theme: props.theme,
//       autosize: props.autosize,
//     };

//     const tvWidget = new widget(widgetOptions);

//     return () => {
//       tvWidget.remove();
//     };
//   }, [props]);

//   return (
//     <div className="w-full h-full">
//       <div ref={chartContainerRef} className="w-full h-full" />
//     </div>
//   );
// };







// "use client";

// import dynamic from "next/dynamic";
// import { FC, useState, useEffect } from "react";
// import Script from "next/script";

// import {
//   ChartingLibraryWidgetOptions,
//   ResolutionString,
// } from "@/public/static/charting_library/charting_library";
// import { fetchSolanaData } from "@/utils/apiCalls"; // Assuming this is the path to your API logic
// import { useQuery } from "@tanstack/react-query";
// import { ChartInformation, FetchDynamicTokenResponse } from "@/utils/types";

// interface ChatProps {
//   tokenAddressDynamic: FetchDynamicTokenResponse;
//   chartData: ChartInformation;
//   isScriptReady:boolean
// }

// const TVChartContainer = dynamic(
//   () =>
//     import("@/components/metabots/charts/TvChartContainer").then(
//       (mod) => mod.TVChartContainer
//     ),
//   { ssr: false }
// );

// const Chart: FC<ChatProps> = ({ tokenAddressDynamic }) => {
//   const [isScriptReady, setIsScriptReady] = useState(false);
//   const tokenAddress = tokenAddressDynamic?.token?.mint;

//   const {
//     data: chartData,
//     isLoading,
//     error,
//   } = useQuery({
//     queryKey: ["chartInformation"],
//     queryFn: () => fetchSolanaData(tokenAddress),
//   });

  
  
//   console.log({chartData})
//   console.log("TradingView script loaded", isScriptReady);

//   const widgetProps: Partial<ChartingLibraryWidgetOptions> = {
//     symbol: tokenAddressDynamic?.token?.symbol || 'defaultSymbol', // Provide a default symbol here
//     interval: "1D" as ResolutionString,
//     library_path: "/static/charting_library/",
//     locale: "en",
//     charts_storage_url: "https://saveload.tradingview.com",
//     charts_storage_api_version: "1.1",
//     client_id: "tradingview.com",
//     user_id: "public_user_id",
//     fullscreen: false,
//     theme: "dark",
//     autosize: true,
//   };
  

//   if (isLoading) return <div>Loading...</div>;
//   if (error) return <div>Error loading chart data</div>;

//   return (
//     <div className="h-full w-full">
//      <Script
//   src="/static/datafeeds/udf/dist/bundle.js"
//   strategy="lazyOnload"
//   onLoad={() => setIsScriptReady(true)} // Ensure this callback works
// />

//       {isScriptReady && chartData && (
//       <TVChartContainer {...widgetProps} chartData={chartData}  />
//       )}
//     </div>
//   );
// };

// export default Chart;






// useEffect(() => {
//       const widgetOptions: ChartingLibraryWidgetOptions = {
//         symbol: props.symbol,
  
//         overrides:{
//          "mainSeriesProperties.candleStyle.upColor": '#10F9E0',
//   "mainSeriesProperties.candleStyle.downColor": '#1029F9',
//   "mainSeriesProperties.candleStyle.borderUpColor": '#10F9E0',
//   "mainSeriesProperties.candleStyle.borderDownColor": '#1029F9',
//   "paneProperties.background": '#0C141F',
//   "paneProperties.backgroundType": 'solid',
  
  
      
//         },
       
//         // downColor: '#1029F9',
//         // borderUpColor: '#10F9E0',
//         // borderDownColor: '#1029F9',
//         // upColor: "#10F9E0",
        
//         datafeed: {
//           onReady: (callback: any) => {
//             setTimeout(() => callback({ supports_search: true, supports_group_request: false }), 0);
//           },
//           resolveSymbol: (symbolName: string, onSymbolResolvedCallback: any, onResolveErrorCallback: any) => {
//             setTimeout(() => {
//               onSymbolResolvedCallback({
//                 ticker: symbolName,
//                 name: symbolName,
//                 description: symbolName,
//                 type: "stock",
//                 session: "0900-1630",
//                 timezone: "Etc/UTC",
//                 has_intraday: true,
//                 supported_resolutions: ["1D", "1W", "1M"],
//                 pricescale: 100,
//               });
//             }, 0);
//           },
//           getBars: (
//             symbolInfo: LibrarySymbolInfo,
//             resolution: ResolutionString,
//             periodParams: PeriodParams,
//             onHistoryCallback: HistoryCallback,
//             onErrorCallback: ErrorCallback
//           ) => {
  
//             // Log the data to verify it
//             console.log("props.chartData:", props.chartData);
  
          
//             const bars = props.chartData?.oclhv?.map((data: OCLHV) => ({
//               time: data?.time * (data?.time < 10000000000 ? 1000 : 1), // Convert seconds to milliseconds
//               open: data?.open,
//               close: data?.close,
//               high: data?.high,
//               low: data?.low,
//               volume: data?.volume,
//             })).filter(bar => bar.time && bar.open && bar.close); // Filter invalid bars
            
//             if (!bars.length) {
//               console.warn("No bar data available!");
//               onHistoryCallback([], { noData: true });
//               return;
//             }
//             onHistoryCallback(bars, { noData: false });
            
            
//             if (!chartContainerRef.current) {
//               console.error("Chart container not initialized");
//               return;
//             }
            
//             onHistoryCallback(bars, { noData: false });
          
//             console.log("Processed bars:", bars);
  
//             console.log(chartContainerRef.current);
           
  
           
  
//             setTimeout(() => {
//               onHistoryCallback(bars, { noData: false });
//             }, 0);
//           },
          
          
//           subscribeBars: (
//             symbolInfo: LibrarySymbolInfo,
//             resolution: ResolutionString,
//             onRealtimeCallback: any,
//             subscriberUID: string,
//             onResetCacheNeededCallback: any
//           ) => {},
//           unsubscribeBars: (subscriberUID: string) => {},
  
//           searchSymbols: (userInput: string, exchange: string, symbolType: string, onResult: any) => {
//             setTimeout(() => {
//               onResult([
//                 {
//                   symbol: userInput,
//                   full_name: userInput,
//                   description: `${userInput} description`,
//                   exchange,
//                   ticker: userInput,
//                   type: symbolType,
//                 },
//               ]);
//             }, 0);
//           },
//         },
//         interval: props.interval as ResolutionString,
//         container: chartContainerRef.current,
//         library_path: props.library_path,
//         locale: props.locale as LanguageCode,
//         disabled_features: ["use_localstorage_for_settings"],
//         enabled_features: ["study_templates"],
//         charts_storage_url: props.charts_storage_url,
//         charts_storage_api_version: props.charts_storage_api_version,
//         client_id: props.client_id,
//         user_id: props.user_id,
//         fullscreen: props.fullscreen,
//         theme: props.theme,
//         autosize: props.autosize,
//       };
  
//       const tvWidget = new widget(widgetOptions);
  
//       return () => {
//         tvWidget.remove();
//       };
//     }, [props])